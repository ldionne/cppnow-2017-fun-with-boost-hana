// Copyright Louis Dionne 2016
// Distributed under the Boost Software License, Version 1.0.

#include <array>
#include <cassert>
#include <functional>
#include <type_traits>
#include <vector>


enum class Event : int {
  <%= (1..env[:maxn]).map { |i| "EVENT#{i}" }.join(',') %>
};

// sample(struct)
struct event_system {
  using Callback = std::function<void()>;
  std::array<std::vector<Callback>, <%= env[:maxn] %>> map_;
// end-sample

// sample(on)
template <typename F>
void on(Event event, F callback) {
  auto index = static_cast<std::underlying_type_t<Event>>(event);
  assert(index < <%= env[:maxn] %> &&
    "trying to add a callback to an unknown event");

  auto& callbacks = map_[index];
  callbacks.push_back(callback);
}
// end-sample

// sample(trigger)
void trigger(Event event) const {
  auto index = static_cast<std::underlying_type_t<Event>>(event);
  assert(index < <%= env[:maxn] %> &&
    "trying to trigger an unknown event");

  auto& callbacks = map_[index];
  for (auto& callback : callbacks)
    callback();
}
// end-sample
};


template <typename Events>
__attribute__((noinline)) void loop(Events const& events) {
  for (unsigned long long i = 0; i < <%= env[:iterations] %>; ++i) {
    <% (1..n).each do |i| %>
      events.trigger(Event::EVENT<%=i%>);
    <% end %>
  }
}

int main() {
  event_system events;

  <% (1..env[:maxn]).each do |i| %>
    events.on(Event::EVENT<%=i%>, []{});
  <% end %>

#if defined(METABENCH)
  loop(events);
#endif
}
